#version 450 core

// Uniform block which contains the positions and velocities of the attractors
layout (std140, binding=0) uniform attractorBlock
{
	vec4 attractor[64]; // xyz - position, w - mass
};

// Compute shader - local workgroup size
layout (local_size_x = 128) in;

// Buffers which contain the positions and velocities of the particles
layout (rgba32f, binding=0) uniform imageBuffer velBuffer;
layout (rgba32f, binding=1) uniform imageBuffer posBuffer;

// Delta time
uniform float dt;

void main(void)
{
	// Read the current position and velocity of the current particle
	vec4 vel = imageLoad(velBuffer, int(gl_GlobalInvocationID.x));
	vec4 pos = imageLoad(posBuffer, int(gl_GlobalInvocationID.x));

	// Update position
	pos.xyz += vel.xyz * dt;

	// Update lifetime
	pos.w -= 0.001f * dt;

	int i;

	// Update velocity
	for (i = 0; i < 64; ++i)
	{
		// Calculate vector from particle to attractor i
		vec3 dist = attractor[i].xyz - pos.xyz;

		// Update velocity using the force generated by the attractor
		vel.xyz += dt * dt * attractor[i].w * normalize(dist) / (dot(dist, dist) + 10.0f);
	}

	// If the particle expires => reset
	if (pos.w < 0.0f)
	{
		// Reset position close to the origin
		pos.xyz = -pos.xyz * 0.01f;

		// Slow down the particle
		vel.xyz *= 0.01f;

		// Reset particle lifetime
		pos.w += 1.0f;
	}

	// Store the new position and velocity in the image buffers
	imageStore(posBuffer, int(gl_GlobalInvocationID.x), pos);
	imageStore(velBuffer, int(gl_GlobalInvocationID.x), vel);
}